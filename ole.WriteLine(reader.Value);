[1mdiff --git a/Orro/DeviceCollection.cs b/Orro/DeviceCollection.cs[m
[1mindex b3d2bd7..0f98a68 100644[m
[1m--- a/Orro/DeviceCollection.cs[m
[1m+++ b/Orro/DeviceCollection.cs[m
[36m@@ -28,14 +28,29 @@[m [mnamespace Orro[m
             Devices.Remove(device);[m
         }[m
 [m
[31m-        public void ToJson<T>(T instance)[m
[32m+[m[32m        public void ToJson<T>(T instance, string location)[m
         {[m
             // serialize JSON directly to a file[m
[31m-            using (StreamWriter file = File.CreateText(@"c:\bulbs\bulbs.json"))[m
[32m+[m[32m            using (StreamWriter file = File.CreateText(location))[m
             {[m
                 var result = JsonConvert.SerializeObject(instance, Formatting.Indented, new DeviceCollectionConverter());[m
                 file.Write(result);[m
             }[m
         }[m
[32m+[m
[32m+[m[32m        public T FromJson<T>(string location)[m
[32m+[m[32m        {[m
[32m+[m[32m            var JSON = File.ReadAllText(location);[m
[32m+[m[32m            var result = JsonConvert.DeserializeObject<T>(JSON, new DeviceCollectionConverter());[m
[32m+[m
[32m+[m[32m            if (result is T)[m
[32m+[m[32m            {[m
[32m+[m[32m                return result;[m
[32m+[m[32m            }[m
[32m+[m[32m            else[m
[32m+[m[32m            {[m
[32m+[m[32m                throw new Exception($"This should ony be used to access {typeof(T)} devices!");[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
     }[m
 }[m
[1mdiff --git a/Orro/DeviceCollectionConverter.cs b/Orro/DeviceCollectionConverter.cs[m
[1mindex ff742a8..ae65642 100644[m
[1m--- a/Orro/DeviceCollectionConverter.cs[m
[1m+++ b/Orro/DeviceCollectionConverter.cs[m
[36m@@ -3,6 +3,7 @@[m [musing Orro.Interfaces;[m
 using System;[m
 using System.Collections.Generic;[m
 using System.Diagnostics.CodeAnalysis;[m
[32m+[m[32musing System.IO;[m
 using System.Text;[m
 [m
 namespace Orro[m
[36m@@ -11,7 +12,19 @@[m [mnamespace Orro[m
     {[m
         public override DeviceCollection ReadJson(JsonReader reader, Type objectType, [AllowNull] DeviceCollection existingValue, bool hasExistingValue, JsonSerializer serializer)[m
         {[m
[31m-            throw new NotImplementedException();[m
[32m+[m[32m            var devices = new DeviceCollection();[m
[32m+[m[41m         [m
[32m+[m[32m            //while(reader.Read())[m
[32m+[m[32m            //{[m
[32m+[m[32m            if(reader.Read())[m
[32m+[m[32m            {[m
[32m+[m[32m                Console.WriteLine(reader.Value);[m
[32m+[m[32m            }[m
[32m+[m[41m                [m
[32m+[m[32m            //}[m
[32m+[m[41m            [m
[32m+[m
[32m+[m[32m            return devices;[m
         }[m
 [m
         public override void WriteJson(JsonWriter writer, [AllowNull] DeviceCollection value, JsonSerializer serializer)[m
[1mdiff --git a/Orro/Interfaces/IStorable.cs b/Orro/Interfaces/IStorable.cs[m
[1mindex 31d6c81..1d75e55 100644[m
[1m--- a/Orro/Interfaces/IStorable.cs[m
[1m+++ b/Orro/Interfaces/IStorable.cs[m
[36m@@ -8,20 +8,8 @@[m [mnamespace Orro.Interfaces[m
 {[m
     interface IStorable[m
     {[m
[31m-        T FromJson<T>(string JSON)[m
[31m-        {[m
[31m-            var result = JsonConvert.DeserializeObject<T>(JSON);[m
[32m+[m[32m        T FromJson<T>(string location);[m
 [m
[31m-            if (result is T)[m
[31m-            {[m
[31m-                return result;[m
[31m-            }[m
[31m-            else[m
[31m-            {[m
[31m-                throw new Exception($"This should ony be used to access {typeof(T)} devices!");[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        void ToJson<T>(T instance);[m
[32m+[m[32m        void ToJson<T>(T instance, string location);[m
     }[m
 }[m
[1mdiff --git a/Orro/Program.cs b/Orro/Program.cs[m
[1mindex b73cab9..e20904c 100644[m
[1m--- a/Orro/Program.cs[m
[1m+++ b/Orro/Program.cs[m
[36m@@ -24,8 +24,9 @@[m [mnamespace Orro[m
             devices.Add(bulb);[m
             devices.Add(bulb);[m
 [m
[31m-            devices.ToJson(devices);[m
[31m-[m
[32m+[m[32m            devices.ToJson(devices, @"C:/bulbs/bulbs.json");[m
[32m+[m[32m            var result = devices.FromJson<DeviceCollection>(@"C:/bulbs/bulbs.json");[m
[32m+[m[32m            Console.WriteLine(result);[m
             //bulb.ToJson(bulb);[m
 [m
 [m
[1mdiff --git a/Orro/TP_Link_Kasa.cs b/Orro/TP_Link_Kasa.cs[m
[1mindex 40b1c15..ec119b8 100644[m
[1m--- a/Orro/TP_Link_Kasa.cs[m
[1m+++ b/Orro/TP_Link_Kasa.cs[m
[36m@@ -41,15 +41,15 @@[m [mnamespace Orro[m
 [m
             //Parameterise the string, lol no parameters[m
             var parameterisedString = Encryption.ParameteriseCommandString(command, parameters);[m
[31m-            [m
[32m+[m
             //Encrypt the command string[m
             var encryptedString = Encryption.EncryptCommand(parameterisedString);[m
[31m-            [m
[32m+[m
             var socket = Connection.CreateConnectionSocket(DeviceIP);[m
[31m-            [m
[32m+[m
             //Execuite the actual command[m
             var resultOfCommandEncrypted = CommunicationMethod.Invoke(encryptedString, socket, DeviceIP);[m
[31m-            [m
[32m+[m
             var decryptedResult = Encryption.DecryptResponse(resultOfCommandEncrypted);[m
 [m
             Console.WriteLine(decryptedResult);[m
[36m@@ -74,7 +74,7 @@[m [mnamespace Orro[m
             return Encoding.GetEncoding("ISO-8859-1").GetString(buffer, 0, result);[m
         }[m
 [m
[31m-        public void ToJson<T>(T instance)[m
[32m+[m[32m        public void ToJson<T>(T instance, string location)[m
         {[m
             // serialize JSON directly to a file[m
             using (StreamWriter file = File.CreateText(@"c:\bulbs\bulbs.json"))[m
[36m@@ -83,5 +83,20 @@[m [mnamespace Orro[m
                 file.Write(result);[m
             }[m
         }[m
[32m+[m
[32m+[m[32m        public T FromJson<T>(string location)[m
[32m+[m[32m        {[m
[32m+[m[32m            var JSON = File.ReadAllText(location);[m
[32m+[m[32m            var result = JsonConvert.DeserializeObject<T>(JSON, new DeviceCollectionConverter());[m
[32m+[m
[32m+[m[32m            if (result is T)[m
[32m+[m[32m            {[m
[32m+[m[32m                return result;[m
[32m+[m[32m            }[m
[32m+[m[32m            else[m
[32m+[m[32m            {[m
[32m+[m[32m                throw new Exception($"This should ony be used to access {typeof(T)} devices!");[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
     }[m
 }[m
